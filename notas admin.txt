/********************************************* CAPITULOS *********************************************/

1. Linea 10 a 360
2. Linea 361 a
3. 
4. 
5. 
6. 

/********************************************* CAPITULO 1 *********************************************/

- Lenguaje de programacion
- Interpretado y no complilado
- Orientado a objeto
- Imperativo (Las instrucciones van de linea a linea, primero algo y despues otra cosa)
- Case sensitive (Escribir exactamente igual - Upper & lower case)
- Basado en prototipos/instancias/classless (Los objetos que creamos estamos basando de un producto ya creado por java)
- Tipado debil (El valor de las variables pueden cambiar- es decir mas flexible)
- Lenguaje Dinamico - el dato se ajusta a la variable, si x = 1, sera un numero, si x = farid, sera un texto
- Esta contruido sobre EMA SCRIPT (6 en adelante)
ES.NEXT - Aprendemos de la nueva tecnologia

/********************************************* TIPOS DE VARIABLES *********************************************/

- String (Cadena de texto)

hay tres formas de escribirlas

string = ""; '';´´; 

La forma general es "";

string = "Cadena de texto" -> Son caracteres unidos

- Number

Es un numero

number = 19

No va entre comillas, es otro tipo de dato. Si va entre comillas ya seria un string

- Booleano

Son 0 o 1; true o false;

- Symbol (Mas adelante)

/********************************************* VARIABLES *********************************************/

Forma de declarar una variables

var, let, const

let y const trabajan con bloques

var numero = 15; 

var declara a todo, en todo el codigo, mayor alcance

let numero = 15;

let nos declara solo en la caja donde lo declaro, si esta fuera no funciona

const nombre = "Farid"

nombre = "farid"

Esta variale siempre sera farid, nunca cambiara
Saldra error si se la define 2 veces

declarar

let numero;

numero = 29;

a los const se los debe declarar siempre al inicializarla

const hola = 1; 

no poner 
const hola; hola = 1

Casos especiales

Undefined

La variable se puede declarar invalidam es decir nunca se la delcaro
EJEMPLO

var numero;

alert('numero') -> Saldra q no esta definido

Null 

Nan (mas adelante)

let numero1, numero2, numero3;

numero1 = 11;
numero2 = 22;
numero3 = 33;


/********************************************* HOISTING *********************************************/

Hay una estructura que generalmente se aplica, no siempre.

Primero se la declara, despues se las inicializa y despues se la ejecuta


/********************************************* NULL *********************************************/

let numero = null; No va a valer nada es decir vacio, declarada e inicializda

Undefined no tiene valro todavia pero mas adelante si, no esta inicializada


/********************************************* NAN *********************************************/

Not a Number

es decir

let number = 15, number1 = "FARID";

alert(number * number1)

El texto no se puede multiplicar jajaja, fijarse bien.


/********************************************* API - PROMPT *********************************************/

Input de entrada
prompt("Dime tu nombre")

Como lo guardo
let nombre = prompt("Decime tu nombre");

alert("Hola" + nombre);


/********************************************* OPERADORES *********************************************/

- BASICOS

Asignacion

Asigna un valor al operando de la izquierda basado en el valor del operando de la derecha

Ejemplo:

var numero = 10;

numero += 5; Le agregue 5 es lo mismo q decir numero = numero + 5;

document.write(numero);

Aritmeticos

Toman valores numericos, retornando/llegando a un valor unico

Ejemplo:

numero1 = 10;
numero2 = 5;

resultado = numero1 + numero2;
resultado = numero1 - numero2;
resultado = numero1 * numero2;
resultado = numero1 / numero2;

resultado = numero1--
resultado = numero1++
resultado = numero1**1 o numero1**numero2

pero debe hacerse antes

numero1--;
resultado = numero1;

alert(resultado)

alert(numero1--) ahi se ejecutara despues el resultado de resta jajaja, declarar despues;



/********************************************* CONCATENACION *********************************************/

Concatenar es unir strings, 2 cadenas de texto

let saludo = "¡Hola Pedro!";
let pregunta = "¿Como estas?";

let frase = saludo + pregunta;

document.write(frase)

- Como convierto una cadena de texto a unos numericos

let numero1 = 5
let numero2 = 20

let frase = "" + numero1 + numero2 (Forzamos el string)

Metodo Concant

frase = numero1.concat(numero2); (Solo sirve para cadenas)

Backticks y variable ${}

let nombre = "Farid Ale Ali"

backtick = `` - CTRL + ALT + Cierra llave

let frase = `Soy ${nombre} y estas sentado`;

document.write(frase);

Se puede hacer tambien Asigna

let frase = `Soy ${nombre} 
y estas 
sentado`;

let frase = `

<h1>${nombre}</h1> 
<div>y estas sentado</div>`;


---------- Bloquote y Escape ----------

let nombre = Farid
let frase = "Hola soy 'farid' y soy crack" (No podria haber otra comilals dobles)
let frase = "Hola soy `farid` y soy crack" (No podria haber otra comilals dobles)

document.write(frase)

/********************************************* OPERADORES (INTERMEDIO) *********************************************/

---------------- Operadores comparacion ----------------

Comparan dos variables y devuelven un valor Boleeano

si la relacion es verdadera nos da true
si la relacion es falsa nos da false

Let numero = 10; Asignamos
Let numero2 = 5; Asignamos

document.write(numero == numero2); Iguales
document.write(numero != numero2); Distinto
document.write(numero === numero2); Igual estricto
document.write(numero !== numero2); Distinto estricto
document.write(numero >= numero2); Mayor o igual que

Let texto = "texto 1"; Asignamos
Let texto2 = "texto 2"; Asignamos

document.write(texto == texto2); 
document.write(texto != texto2); 
document.write(texto === texto2); 
document.write(texto !== texto2); 

Let texto = "10"; Asignamos
Let numero = 10; Asignamos

document.write(texto == numero); No distingue 
document.write(texto === numero); Distingue, mismo tipo de dato y mismo tipo de valor

---------------- Operadores logicos ----------------

Se basan en operadores de comparacion (True or false) para devolver algo

AND -> &&
OR -> ||
NOT -> !

Let valor = true;
Let valor2 = true;

Let resultado = valor && valor2; Si las dos condiciones se cumplen, SERA TRUE

Let resultado = valor || valor2; Si alguna de las dos condiciones se cumplen, SERA TRUE

Let resultado = !valor; La invierte

document.write(resultado);

Ejemplos

document.write(false && false); Sera falso
document.write(false && true); Sera falso
document.write(true && true); Sera verdadero

let numero = 5;
let numero2 = 10;

let afirmacion = numero == numero2
let afirmacion2 = numero >= numero2

document.write(numero && numero2)

let numero = 5;
let numero2 = 5;

let afirmacion = numero == numero2

document.write(!afirmacion); Es verdadero, entonces es false

document.write(numero > numero2 || numero < numero2)

/********************************************* CAMELCASE *********************************************/

propiedadHolaComoEstas

primera palabra, primera letra minuscula
2da palabra y las siguientes, primera letra mayuscula

Asi trabaja JavaScript

/********************************************* CONDICIONALES *********************************************/

let numero = 5;
let numero2 = 10;

let operacion = numero > numero2;

if (operacion == true) {
    alert("Hola")
}

else if (operacion == false) {
	alert("Chau bobo")
}

else {
    alert("no le pegaste a nada")
}

---------------------

let texto = "Farid";

if (texto == "Faru") {
    alert("Hola amor")
}

else if (texto == "bb") {
	alert("Hola bb")
}

else {
    alert("Sup.")
}


/********************************************* CAPITULO 2 *********************************************/


- Historia de COFLA (Cliente ficticio que habra que darle soluciones al pana)

--------------------------

Primera historia: 

Problema A

Querian comprar el helado mas caro con la plata que tenian

Tarea:

- Ingresar el monto y mostrar el mas caro
- Si hay 2 o mas, mostrar ambos
- Indicar el vuelto

Problema B

Al final no compra un carajo y rompe todo, y la plata que tenia la dona a un homeless y compra un
boleto de loteria

Tarea:

- Si le alcanza 1, lo compra
- Si le alcanza 2, compra ambas
- Si le alcanza 3, compra todas y el vuelto lo regala
- Debe mostra que compro y el vuelto

Problema C

Hay un homicidio y la policia crea un dector de mentira con JavaScript y tiene 3 sospechosos, entre ellos
COFLA, que habia roto el local

Tarea:

- Si miente, le da una descarga.
- Si no miente, no hacer nada.
- Si el aparato no decide, aclarar la pregunta.

--------------------------


/********************************************* ARRAYS *********************************************/

Variables que se pueden guardar muchos datos

let arrays = [50, datos, voy, a, guardar];

let arrays = ["Banana", "Pera", "Manzana"];

document.write(arrays); - Banana,Pera,Manzana
document.write(arrays[0]); - Banana
document.write(arrays[1]); - Pera
document.write(arrays[2]); - Manzana


/********************************************* ARRAYS ASOCIATIVOS *********************************************/


let PC = {
    nombre: "PC GAMER",
    procesador: "I5",
    ram: "8",
    espacio: "1TB"
};

let PC2 = ["PC GAMER", "I5", "8", "1TB"];

document.write = (pc2)
document.write = (pc1) ME SALE QUE ES UN objeto

document.write = (pc1["nombre"])

let PC = {
    nombre: "PC GAMER",
    procesador: "I5",
    ram: "8",
    espacio: "1TB"
};

let nombre = PC["nombre"];
let procesador = PC["procesador"];
let ram = PC["ram"];
let espacio = PC["espacio"];

frase = `El nombre de mi pc es <b>${nombre}</b> <br>
        Mi procesador es <b>${procesador}</b> <br>
        Mi ram tiene <b>${ram}GB</b> <br>
        Mi espacio es de <b>${espacio}</b> `;

document.write(frase);

/********************************************* BUCLES E ITERACION *********************************************/

SENTANCIAS : 

1. while (Bucle que esta constante mente preguntando si la condicion se cumple permanente mente, distinto del 
if que solamente pregunta una vez y sigue con el programa)

2. do while
3. break 

-----

4. for
5. for in
6. for of

------


7. label 
8. continue

Ejemplo

1. Pregunta y despues hace

let numero = 0;

while (numero < 6) {

    numero++

    document.write(numero + "<br>")
}


2. Hace y despues pregunta

let numero = 0;

do  {

    numero++

    document.write(numero + "<br>")
}

while (numero > 6)

solo se ejecutara la primera

3. Finaliza el periodo

let numero = 0;

while (numero < 1000) {

    numero++

    document.write(numero + "<br>")

    if ( numero == 10)
    { 
        break;
    }
}

document.write("Fin brother")

------

HAY WHILES QUE SE PUEDEN DETERMINAR SU CANTIDAD DE VECES QUE VAN A BUCLEAR Y HAY OTRAS QUE No

PASOS 

DECLARAMOS
INICIALIZAMOS
ITERAMOS (Hace lo mismo varias veces)

4. for (Declara variables dentro de la condicion, es como un while pero declara eso)

let i = 10;
let i = 30;

No me va a permitir porq ya la cree 2 veces

let i = 10;

for (Let i = 0;) si me dejara porque los LET son regionales, son para bloques. Por dentro del bloque sera = 0; por fuera sera = 10;

--

(Declara; inicializacion/condicion; iteramos)

for (let i = 0; i < 6; i++) {
    document.write(i + "<br>");
}

for (let i = 6; i >= 6; i--) {
    document.write(i + "<br>");
}

document.write(i);

let i = 6

for (i; i >= 6; i--) {

    if( i == 1) {
        break;
    }
    document.write(i + "<br>");

}

-- CONTINUE 

let i = 6

for (i; i >= 6; i--) {

    if( i == 1) {
        continue; //LO SALTEA AL 1
    }
    document.write(i + "<br>");
   
}

--------------------

FOR IN Y OF  

let animales = ["Perro", "Gato", "Hamster"];

IN devuelve la posicion numera de cara uno (Nos da el indice de cada uno)

for(animal in animales) {
    document.write(animales + "<br>");
}

document.write("<br><br>");

OF nos devuelve su denominacion en forma ordenada de cada uno de ellos (Lo que contiene cada uno)

for(animal of animales) {
    document.write(animales + "<br>");
}

Y COMO CAMBIO ESO EN "IN", de esta forma

for(animal in animales) {
    document.write(animales[animal] + "<br>");
}

Entra al bucle ANIMALES, en el elemento ANIMAL

7. label


array1 = ["Manzana","Pera","Banana"];
array2 = ["Elefante","Perro",array1];

forRancio:
for (Let array in array2) {
    if(array == 2) {
        for(Let array of array1) {
            if(array == "Manzana") {
                continue forRancio; Saltea la interacion del todo el bucle entero
            }
            document.write(array + "<br>");
        } 
        else {
            document.write(array[array2] + "<br>");
        }
    }
}

/********************************************* FUNCIONES *********************************************/

Declaramos

function saludar() {
    let saludo = prompt("Hola Farid, ¿Como estas hoy?");

    if(saludo == "Bien") {
        alert("Me alegro mucho :D");
    }
    else {
        alert("Que pena D:");
    }
}

Ejecutamos

saludar()


--------------


function saludar() {
    alert("Hola");
}

let saludo = saludar();

document.write(saludo)

Aca no nos da ningun dato de saludo de vuelta; este saludo no tiene valor porque no retorna nada
Una cosa es lo que hace, otra cosa es lo que retorne;
Sos mayor de 18? Si, retorna activado. No, retorna bloqueo;
Ademas como eso, es como un break porque termian al funcion, si lo pongo antes todo lo siguiente no funcionara;

function saludar() {
    alert("Hola");
    return "Me retorno correctamente";
}

let saludo = saludar();

document.write(saludo)


--------- PARAMETROS ----------

function suma(num1,num2) {
    let res = num1 + num2;
    document.write(res + "<br>");
}

document.write(res + "<br>"); no existe

suma(22, 44);

es lo mismo que esto

let num1;
let num2;

function suma(num1,num2) {
    let res = num1 + num2;
    document.write(res + "<br>");
}

suma(22, 44);

document.write(res + "<br>"); existe


----------

function suma(num1,num2) {
    let res = num1 + num2;
    return res;
}

let resultado = suma(20,15);

document.write(resultado + "<br>");

function saludar(nombre) {
    let frase = `¡Hola ${nombre}!, ¿Como estas?`;
    document.write(frase);
}

saludar("Farid");

scope = Es regional, solo funcionan dentro del bloque/funcion


const saludar = function(nombre) {
    let frase = `¡Hola ${nombre}!, ¿Como estas?`;
    document.write(frase);
}

saludar("Farid");

-------------- FUNCION EN FLECHA ---------------

Transformamos el function en una flecha y el codigo quedaria asi

const saludar = (nombre)=> {
    let frase = `¡Hola ${nombre}!, ¿Como estas?`;
    document.write(frase);
}

saludar("Farid");

Beneficios
- se puede usar sin parentesis si es 1 solo parametro
- se puede dejar de usar llaves si es uan sola linea
- ya se retorna automaticamente

let frase = `¡Hola ${nombre}!, ¿Como estas?`;
const saludar = (nombre)=> document.write(frase);

const saludar = (nombre)=> {
    document.write("Hola ${nombre}, como estas?");
}

saludar("Farid")


SOLUCIONES COFLA 2

a. 

let freepass = false;

const entrada = (horario) =>{
	let edad = prompt("¿Cuantos años tienes?");
	if(edad >= 18) {
		if(freepass == false && horario >= 2 && horario < 7) {
			alert("Podes entrar gratis por ser el primero luego de las 2AM");
			freepass = true;
		}
		else {
			alert("Tenes que pagar la entrada");
		}
	}
	else {
		alert("No podes pasar por ser menor de edad");
	}
}

entrada(2);
entrada(3);


b.

let cantidadAlumno = prompt("¿Cuantos alumnos hay en la cursada?");
let alumnosTotales = [];

for (i = 0;i < cantidadAlumno; i++) {
	alumnosTotales[i] = [prompt(`Nombre del alumno ` + (i+1)), 0];
}


const tomarAsistencia = (nombre,p)=> {
	let presencia = prompt(nombre)
	if (presencia == "p" || presencia == "P") {
		alumnosTotales[p][1]++
	}
}

for (i = 0; i < 30; i++) {
	for(alumno in alumnosTotales) {
		tomarAsistencia(alumnosTotales[alumno][0], alumno);
	}
}

for(alumno in alumnosTotales) {
	let resultado = `Alumno: ${alumnosTotales[alumno][0]} <br><br>
	_____Presente_____: ${alumnosTotales[alumno][1]} <br>
	_____Ausente_____: ${30 - parseInt(alumnosTotales[alumno][1])} <br>
	`
	if((30 - alumnosTotales[alumno][1]) > 18) {
		resultado += "<br><b style='color:red;'>Desaprobado por inasistencia</b><br>"
	} 
	else {
		resultado += "<br><br>"
	}
	document.write(resultado);
}

c.

let operacion = prompt("¿Que operacion desea realizar? 1. Sumar - 2. Restar - 3.Dividir - 4.Multiplicar")

const sumar = (num1,num2)=>{
	return parseInt(num1) + parseInt(num2)
}

const restar = (num1,num2)=>{
	return parseInt(num1) - parseInt(num2)
}

const dividir = (num1,num2)=>{
	return parseInt(num1) / parseInt(num2)
}

const multiplicar = (num1,num2)=>{
	return parseInt(num1) * parseInt(num2)
}

if (operacion == 1) {
	let numero1 = prompt("Ingrese el primer numero");
	let numero2 = prompt("Ingrese el segundo numero");

	resultado = sumar(numero1,numero2);
	alert(resultado);
}
else if (operacion == 2) {
	let numero1 = prompt("Ingrese el primer numero");
	let numero2 = prompt("Ingrese el segundo numero");

	resultado = restar(numero1,numero2);
	alert(resultado);
}
else if (operacion == 3) {
	let numero1 = prompt("Ingrese el primer numero");
	let numero2 = prompt("Ingrese el segundo numero");

	resultado = dividir(numero1,numero2);
	alert(resultado);
}
else if (operacion == 4) {
	let numero1 = prompt("Ingrese el primer numero");
	let numero2 = prompt("Ingrese el segundo numero");

	resultado = multiplicar(numero1,numero2);
	alert(resultado);
}


/********************************************* CAPITULO 3 *********************************************/

/**************************** PROGRAMACION ORIENTADA A OBJETOS (POO) *****************************/


Clases: Crean los objetos
Atributo: Caracteristicas de los objetos
Metodo: Cosas que puede hacer nuestro objeto
Constructor: Contruye las propiedades del objeto
Instanciar: Cuando termina el objeto.

Ejemplo consola


//Creacion del objeto
class animal {
	//Constructor (parametros)
	constructor (especie, edad, color) {
		//Propiedades
		this.raza = especie;
		this.edad = edad;
		this.col = color;
	}
}


//Instanciar
let perro = new animal("perro", 2, "marron");

console.log(perro);


Ejemplo con info write


//Creacion del objeto
class animal {
	//Constructor (parametros)
	constructor (especie, edad, color) {
		//Propiedades
		this.raza = especie;
		this.edad = edad;
		this.col = color;
        this.info = `Soy un ${this.raza}, tengo ${this.edad} años y soy de color ${this.col}`;
	}
}


//Instanciar
let perro = new animal("perro", 2, "marron");

document.write(perro.info);

--------


//Creacion del objeto
class animal {
	//Constructor (parametros)
	constructor (especie, edad, color) {
		//Propiedades
		this.raza = especie;
		this.edad = edad;
		this.col = color;
        this.info = `Soy un ${this.raza}, tengo ${this.edad} años y soy de color ${this.col}`;
	}
	//Metodo
    //Si creamos la funcion dentro de la clase, se llama metodo. No funcionan las funciones en flecha
	verInfo () {
		document.write(this.info + "<br>")
	}
}


//Instanciar
let perro = new animal("perro", 2, "marron");

perro.verInfo();

/**************************** CARACTERISTICAS ORIENTADA A OBJETOS (POO) *****************************/


1. Abstraccion: 
Tenemos 1 auto, no hay mas historia. Me omiti mil cosas.
Sin embargo, ya sabes q tenes un auto.
Es decir, tratamos de reducir lo maximo posible un objeto (Resumimos las cosas).

2. Modularidad:
Capacidad de resolver un problema grande, por partes.
Un trabajo de 100hs: Lo dividimos en hacer 10 pedazos de 10hs.

3. Encapsulamiento:
Es que pongamos todos los datos no salgan y queden privados.

4. Polimorfismo:
Ver como un objeto se comporta de una forma distinta mediante un misma clase;


class animal {
	constructor (especie, edad, color) {
		this.raza = especie;
		this.edad = edad;
		this.col = color;
        this.info = `Soy un ${this.raza}, tengo ${this.edad} años y soy de color ${this.col}`;
	}
	verInfo() {
		document.write(this.info + "<br>")
	}
    ladrar() {
        if(this.raza == "perro") {
            document.write("Waw!" + "<br>");
        }
        else {
            document.write("No puede ladrar, ya que es un " + this.raza);
        }
    }
}


//Instanciar
let perro = new animal("perro", 2, "marron");
let gato = new animal("gato", 3, "gris");

perro.verInfo();
perro.ladrar();
gato.verInfo();
gato.ladrar();

/**************************** CARACTERISTICAS ORIENTADA A OBJETOS (POO) *****************************/

1. Herencia: Crea una clase que toma propiedades de otras clases pero que agrega otras cosas, es decir
todos los metodos que haga podra seguir con esas mismas + nuevas :D!

No puedo tener un mismo objeto con el mismo nombre que la clase

No puedo agregar un metodo llamado ladrar si hay un gato o un pajaro, para eso existe esta opcion


class Animal {
	constructor (especie, edad, color) {
		this.raza = especie;
		this.edad = edad;
		this.col = color;
        this.info = `Soy un ${this.raza}, tengo ${this.edad} años y soy de color ${this.col}`;
	}
	verInfo() {
		document.write(this.info + "<br>")
	}
}

class Perro extends Animal {
	constructor(especie, edad, color, raza) {
		super(especie,edad,color); //Lo estoy heredando
		this.raza = raza;
		this.info += `. Es de raza ${this.raza}`;
	}
	ladrar() {
        document.write("Waw!" + "<br>");
    }
}

//Instanciar
let perro = new Perro("perro", 2, "marron", "doberman");
let gato = new Animal("gato", 3, "gris");

perro.verInfo();
perro.ladrar();
gato.verInfo();
gato.ladrar(); //gato.ladrar is not a function

---
METODO ESTATICO
---

Los statics son metdos que no necesita que se cree la clase para poder funcionar. 
Porque no lo necesita ya que no lo definio, osea el objeto no EXISTE.
Osea lo ejecuta sin el objeto.

Ejemplo

class Animal {
	constructor (especie, edad, color) {
		this.raza = especie;
		this.edad = edad;
		this.col = color;
        this.info = `Soy un ${this.raza}, tengo ${this.edad} años y soy de color ${this.col}`;
	}
	verInfo() {
		document.write(this.info + "<br>")
	}
}

class Perro extends Animal {
	constructor(especie, edad, color, raza) {
		super(especie,edad,color); //Lo estoy heredando
		this.raza = raza;
		this.info += `. Es de raza ${this.raza}`;
	}
	static ladrar() {
        document.write("Waw!" + "<br>");
    }
}

//Instanciar

Perro.ladrar();

GETTERS & SETTERS

Getters: Son para obtener un valor.
Setters: Son para definir o modificar un valor.

class Animal {
	constructor (especie, edad, color) {
		this.raza = especie;
		this.edad = edad;
		this.col = color;
        this.info = `Soy un ${this.raza}, tengo ${this.edad} años y soy de color ${this.col}`;
	}
	verInfo() {
		document.write(this.info + "<br>")
	}
}

class Perro extends Animal {
	constructor(especie, edad, color, raza) {
		super(especie,edad,color); //Lo estoy heredando
		this.raza = null;
	}
	set setRaza(newName) {
        this.raza = newName;
    }
    get getRaza() {
        return this.raza;
    }
}

const perro = new Perro("Perro","5","Cafe","Doberman")
perro.setRaza = "Dober"

document.write(perro.getRaza);

En la mayoria de los lenguajes, los getters y setters se utilizan para acceder a 
propiedades privadas o en caso de javascript, a datos encapsulados


/**************************** HISTORIA DE COFLA 4 *****************************/

class Phones{
	constructor(color,peso,rdp,rdc,ram) {
		this.Color = color;
		this.Peso = peso;
		this.ResolucionDePantalla = rdp;
		this.ResolucionDeCamara = rdc;
		this.MemoriaRam = ram;
		this.Encendido = false;
	}
	encender() {
		if(this.Encendido == false) {
			alert("Prendiendo celular");
			this.encendido = true;
		}
		else {
			alert("El celular esta apagandose");
			this.encendido = false;
		}

	}
	reiniciar() {
		if(this.Encendido == true) {
			alert("Reiniciando celular");
		}
		else {
			alert("El celular esta apagado, no se puede reinicar");
		}

	}
	tomarFoto() {
		alert(`Foto tomada en una resolucion de: ${this.ResolucionDeCamara}`);
	}
	grabarVideo() {
		alert(`Video tomado en una resolucion de: ${this.ResolucionDeCamara}`);
	}
	mostrarInfo() {
		document.write(`
			Color: <b>${this.Color}</b><br>
			Peso: <b>${this.Peso}</b><br>
			Resolucion de pantalla: <b>${this.ResolucionDePantalla}</b><br>
			Resolucion de camara: <b>${this.ResolucionDeCamara}</b><br>
			Memoria Ram: <b>${this.MemoriaRam}</b><br><br>`);

        // return `
		// 	Color: <b>${this.Color}</b><br>
		// 	Peso: <b>${this.Peso}</b><br>
		// 	Resolucion de pantalla: <b>${this.ResolucionDePantalla}</b><br>
		// 	Resolucion de camara: <b>${this.ResolucionDeCamara}</b><br>
		// 	Memoria Ram: <b>${this.MemoriaRam}</b><br><br>`;
	}
}

const celular1 = new Phones("Rojo","200g","5'","HD","4GB");
const celular2 = new Phones("Azul","250g","5.2'","4K","3GB");
const celular3 = new Phones("Blanco","180g","5.4'","Full HD","4GB");

celular1.encender();
celular1.reiniciar();
celular1.tomarFoto();
celular1.grabarVideo();

// document.write(`
// 	${celular1.mostrarInfo()}
//  ${celular2.mostrarInfo()}
//  ${celular3.mostrarInfo()}`);

// document.write(`
// 	Color: <b>${celular1.Color}</b><br>
// 	Peso: <b>${celular1.Peso}</b><br>
// 	Resolucion de pantalla: <b>${celular1.ResolucionDePantalla}</b><br>
// 	Resolucion de camara: <b>${celular1.ResolucionDeCamara}</b><br>
// 	Memoria Ram: <b>${celular1.MemoriaRam}</b><br><br>

// 	Color: <b>${celular2.Color}</b><br>
// 	Peso: <b>${celular2.Peso}</b><br>
// 	Resolucion de pantalla: <b>${celular2.ResolucionDePantalla}</b><br>
// 	Resolucion de camara: <b>${celular2.ResolucionDeCamara}</b><br>
// 	Memoria Ram: <b>${celular2.MemoriaRam}</b><br><br>

// 	Color: <b>${celular3.Color}</b><br>
// 	Peso: <b>${celular3.Peso}</b><br>
// 	Resolucion de pantalla: <b>${celular3.ResolucionDePantalla}</b><br>
// 	Resolucion de camara: <b>${celular3.ResolucionDeCamara}</b><br>
// 	Memoria Ram: <b>${celular3.MemoriaRam}</b><br><br>
// 	`)


b.

class PhonesHighGamma extends Phones {
	constructor(color,peso,rdp,rdc,ram,rcde) {
		super(color,peso,rdp,rdc,ram);
		this.ResolucionCamaraExtra = rcde;
	}
	grabarVideoLento() {
		alert("Estas grabando en camara lenta");
	}
	reconocimientoFacial() {
		alert("Reconociendo tu cara");
	}
	mostrarInfoGA() {
		document.write(`
			Color: <b>${this.Color}</b><br>
			Peso: <b>${this.Peso}</b><br>
			Resolucion de pantalla: <b>${this.ResolucionDePantalla}</b><br>
			Resolucion de camara: <b>${this.ResolucionDeCamara}</b><br>
			Memoria Ram: <b>${this.MemoriaRam}</b><br>			
			Camara extra: <b>${this.ResolucionCamaraExtra}</b><br><br>`);
	}
}

const celular4 = new PhonesHighGamma("Rosa","300g","6'","8K","12GB","Sí tiene camara extra");
const celular5 = new PhonesHighGamma("Negro","350g","6.2'","8K","16GB","Sí tiene camara extra");

celular4.grabarVideoLento();
celular5.reconocimientoFacial();

celular4.mostrarInfoGA();
celular5.mostrarInfoGA();



/**************************** CAPITULO 4 *****************************/

/**************************** METODOS STRINGS/CADENA *****************************/

concat(); Junta 2 o mas cadenas y retorna en 1 sola

Ejemplo:

let cadena = "Esto es una cadena ";
//let cadena = new String("Esto es una cadena "); Este objeto es lo que hace.
let resultado = cadena.Concat("EJEMPLO");

document.write(resultado);

RESULTADO: "Esto es una cadena EJEMPLO"

------------------------------ BUSCAR CADENAS Y DEVOLVER UN VALOR --------------------------------

startsWith(); Si una cadena comienza con caracteres de otra cadena, devuelve true, si no false;

Ejemplo:

let cadena = "Esto es una cadena ";
let resultado = cadena.startsWith("Esto");

document.write(resultado);

RESULTADO: true;
---------------

endsWith(); Si una cadena termina con caracteres de otra cadena, devuelve true, si no false;

Ejemplo:

let cadena = "Esto es una cadena ";
let resultado = cadena.endsWith("cadena ");

document.write(resultado);

RESULTADO: true;
---------------

includes(); Si una cadena contiene caracteres de otra cadena, devuelve true, si no false;

Ejemplo:

let cadena = "Esto es una cadena ";
let resultado = cadena.includes("una");

document.write(resultado);

RESULTADO: true;
---------------

indexOf(); Nos devuelve la posicion de donde empieza una palabra, de la primera colocada

Ejemplo:

let cadena = "Esto es una cadena ";
let resultado = cadena.indexOf("una");

document.write(resultado);

RESULTADO: 9; cadena[9]; seria
RESULTADO SI NO ENCUENTA: -1;

---------------

lastIndexOf(); Nos devuelve la posicion de donde termina una , de la ultiam colocada

Ejemplo:

let cadena = "Esto es una cadena ";
let resultado = cadena.lastIndexOf("una");

document.write(resultado);

RESULTADO: 119; cadena[11]; seria
RESULTADO SI NO ENCUENTA: -1;

------------------------------ RELLENAR --------------------------------

padStart(); Rellena la cadena con la cantidad de veces que pretendes al inicio

Ejemplo:

let cadena = "Esto es una cadena ";
let resultado = cadena.padStart(23, "HOLA ");

document.write(resultado);

RESULTADO: "HOLA Esto es una cadena"

---------------

padEnd(); Rellena la cadena con la cantidad de veces que pretendes al final

Ejemplo:

let cadena = "Esto es una cadena ";
let resultado = cadena.padEnd(23, "HOLA ");

document.write(resultado);

RESULTADO: "Esto es una cadena HOLA"

---------------


repeat();

Ejemplo:

let cadena = "Esto es una cadena ";
let resultado = cadena.repeat(2);

document.write(resultado);

RESULTADO: "Esto es una cadena Esto es una cadena "

------------------------------ OTRAS MODIFICACIONES --------------------------------

split(); Corta la cadena y lo transforma en array

Ejemplo:

let cadena = "Hola,Como,Estas";
let resultado = cadena.split(","); //Borria las comas, probar con "Como"

document.write(resultado[2]);

RESULTADO: "Estas";

---------------

substring(); Recorta desde la primer atributo seleccionado (Lo cuenta), hasta el 2do atributo (A este ultimo no 
lo cuenta)

Ejemplo:

let cadena = "Hola como estas";
let resultado = cadena.substring(0,2);

document.write(resultado);

RESULTADO: "Ho";

---------------

toLowerCase(); Transforma todo a minusculas

Ejemplo:

let cadena = "Hola como estas";
let resultado = cadena.toLowerCase();

document.write(resultado);

RESULTADO: "hola como estas";

---------------

toUpperCase(); Transforma todo a mayusculas;

Ejemplo:

let cadena = "Hola como estas";
let resultado = cadena.toLowerCase();

document.write(resultado);

RESULTADO: "HOLA COMO ESTAS";

---------------

toString(); Tranforma una variable a una cadena de texto

Ejemplo:

let numero = 10;
let resultado = cadena.toString();

document.write(2 + resultado);

RESULTADO: 210;

o

let arreglo = ["Hola como estas", "Array2"];
let resultado = arreglo.toString();

document.write(resultado[0]); // Hola como estasArray2

RESULTADO: "H"; // 1 Paso a cadena de texto

---------------

trim(); Quita todos los espacios

Ejemplo:

let cadena = "Hola como estas";
document.write(cadena.length);

RESULTADO 1: 15; Caracteres

let resultado = cadena.trim();
document.write(resultado.trim);

RESULTADO: "Holacomoestas"; Sin espacios

---------------

trimEnd(); Quita los espacios del final

Ejemplo:

let arreglo = "  Hola   ";
let resultado = arreglo.trimEnd();

document.write(resultado)

RESULTADO: "   Hola";

---------------

trimStart(); Quita los espacios del inicio

Ejemplo:

let arreglo = "  Hola   ";
let resultado = arreglo.trimStart();

document.write(resultado)

RESULTADO: "Hola   ";

---------------

valueOf(); Devuelve el valor primitivo de la cadena

Ejemplo:




/**************************** METODOS ARRAYS/ARREGLOS *****************************/

------------------------------ TRANSFORMADORES / MODIFICAN EL ARRAYS (NO HACEN UNO NUEVO) --------------------------------

pop(); Elimina el ultimo elemento de un array y lo devuelve - El invertido es push

Ejemplo:

let nombres = ["Farid", "Ale", "Ali"];

document.write(nombres + "<br>");

let resultado = nombres.pop();

document.write(resultado + "<br>"); Devuelve el ultimo nombre borrado
document.write(nombres + "<br>"); Devuelve los nombres sin el nombre borrado

---------

shift(); Elimina el primer elemento de un array y lo devuelve - El invertido es unshift

Ejemplo:

let nombres = ["Farid", "Ale", "Ali"];

document.write(nombres + "<br>");

let resultado = nombres.shift();

document.write(resultado + "<br>"); Devuelve el primer nombre borrado
document.write(nombres + "<br>"); Devuelve los nombres sin el nombre borrado

---------

push(); Guarda elemnto y puede agregar un elemento al array al final y lo devuelve

Ejemplo:

let nombres = ["Farid", "Ale", "Ali"];

document.write(nombres + "<br>");

let resultado = nombres.push("Pedro", "Jorge");

document.write(resultado + "<br>"); Devuelve cantidades de arrays
document.write(nombres + "<br>"); Devuelve los nombres

---------

reverse(); Invierte el orden de los arrays

Ejemplo:

let numeros = [1, 2, 3];

document.write(numeros + "<br>");

let resultado = nombres.reverse();

document.write(resultado); Devuelve los numeros invertidos;

----------

unshift(); Agrega un o varios elementos al inicio del array y devuelve la nueva 

Ejemplo:

let nombres = ["Farid", "Ale", "Ali"];

document.write(nombres + "<br>");

let resultado = nombres.unshift("A", "B");

document.write(resultado + "<br>"); Devuelve el primer nombre borrado

----------

sort(); Ordena los elementos de un array localmente y lo devuelve ordenado - Orden del diccionario

Ejemplo:

let letras = ["Z", "CN", "CA"];

document.write(letras + "<br>");

let resultado = letras.sort();

document.write(resultado + "<br>"); "CA - CN - Z" Ordenado

----------

splice(); Cambia el contenido de un array elimando elemntos existentes y agregando nuevos elementos.

Ejemplo:

let letras = ["Z", "CN", "CA", "AX", "PA"];

document.write(letras + "<br>");

let resultado = letras.splice(1,2, "PALABRA NUEVA", "NUEVA 2");

document.write(resultado + "<br>"); Probar

let resultado = letras.splice(0,0, "PALABRA NUEVA", "NUEVA 2"); agrega al inicio sin remover
let resultado = letras.splice(-1,0, "PALABRA NUEVA", "NUEVA 2"); agrega al final sin remover

------------------------------ ACCESORES --------------------------------

join(); Une todos los elementos de una matriz (U objeto similar) en una cadena y los devuelve

Ejemplo:

let letras = ["Z", "CN", "CA", "AX", "PA"];

document.write(letras[0] + "<br>");

let resultado = letras.join("<br>Elementos: ");

document.write("Elemento: " + resultado[0]); Probar

----------

slice(); Devuelve una parte de un array dentro de un nuevo array empenzando del inicio hasta el 
fin (fin no incluido).

Ejemplo:

let letras = ["Z", "CN", "CA", "AX", "PA"];

document.write(letras + "<br>");

let resultado = letras.slice(0, 2);

document.write(resultado); // "Z,CN"

Metodos ya vistos: toString(), indexOf(), etc... // SELECCION ELEMENTOS ENTEROS A DIFERENCIA DEL STRING osea los ""

------------------------------ DE REPETICION --------------------------------

filter(); Crea un nuevo array con todos los elementos que cumplan una condicion
Es un bucle q termina al terminar los arrays

Ejemplo:

let letras = ["Z", "CN", "CA", "AX", "PA"];

document.write(letras + "<br>");

let resultado = letras.filter(let numero=> document.write(numero + "<br>"));
let resultado = letras.filter((let numero)=>{
	 document.write(numero + "<br>"));
}

let resultado = letras.filter(function(let numero)=>{
	 document.write(numero + "<br>"));
}

document.write(resultado);

Diferencia de forEach con filter, porque puede agregar condicion.

let resultado = letras.filter(let numero=> > 2) 

document.write(numero + "<br>");

-----------

forEach(); Ejecuta la funcion una vez indicada por cada elemento del array

Ejemplo:

let letras = ["Z", "CN", "CA", "AX", "PA"];

document.write(letras + "<br>");

let resultado = letras.filter(numero=> document.write(numero + "<br>"));
let resultado = letras.filter((numero)=>{
	 document.write(numero + "<br>"));
}

let resultado = letras.filter(function(numero)=>{
	 document.write(numero + "<br>"));
}

document.write(resultado);

/**************************** OBJETO MATEMATICOS/MATH *****************************/

--------- METODOS -----------

sqrt(); Devuelve la raiz cuadrada de un numero
cbrt(); Devuelve  la raiz cubica de un numero
max(); Devuelve el valor mas alto de un numero
min(); Devuelve el valor mas bajo de un numero
random(); Devuelve numero pseudo-aleatorios (0 y 1)
round(); Devuelve el numero entero mas cercano
fround(); Devuelve la representacion flotante de precision simple mas cercana a un numero
floor(); Devuelve el mayor entero menor o igual que.
trunc(); Devuelve la parte entera del numero x, la eliminacion de los digitos fraccionarios

--------- PROPIEDADES -----------

PI(); Devuelve el ratio de la circunferencia de un circulo respecto a su diametro
SQRT1_2(); Raiz cuadrada de 1/2; Equivalente a 1 sobre la raiz cuadrada de 2
SQRT2(); Raiz cuadrada de 2
E(); Constante Euler, la base de los logaritmos naturales
LN2(); Logaritmo narutal de 2
LN10(); Logaritmo natural de 10
LOG2E(); Logaritmo de E con base 2
LOG10E(); Logaritmo de E con base 10

Ejemplos:

Math.sqrt(25) -> 5
Math.cnrt(27) -> 3
Math.max(1, 21, 56, 14) -> 56
Math.min(1, 21, 56, 14) -> 1

Math.random() -> 0.12432 ejemplo
Math.random()*100 -> 12.431232 ejemplo

let numero = Math.random()*100 -> 12.431232 ejemplo
Math.round(numero) -> 13 ejemplo
Math.floor(numero) -> 12 ejemplo Redondea para abajo

Math.trunc(); -> Elimina lso decimales


































































